// This file is generated by rust-protobuf 3.0.3. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `MSAHeader.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_3;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.MSAHeader)
pub struct MSAHeader {
    // message fields
    // @@protoc_insertion_point(field:proto.MSAHeader.sender_id)
    pub sender_id: ::std::string::String,
    // @@protoc_insertion_point(field:proto.MSAHeader.message_uuid)
    pub message_uuid: ::std::string::String,
    // @@protoc_insertion_point(field:proto.MSAHeader.type)
    pub type_: ::protobuf::EnumOrUnknown<msaheader::Type>,
    // @@protoc_insertion_point(field:proto.MSAHeader.url)
    pub url: ::std::string::String,
    // @@protoc_insertion_point(field:proto.MSAHeader.method)
    pub method: ::std::string::String,
    // @@protoc_insertion_point(field:proto.MSAHeader.message_index)
    pub message_index: i32,
    // @@protoc_insertion_point(field:proto.MSAHeader.state)
    pub state: ::protobuf::EnumOrUnknown<msaheader::State>,
    // @@protoc_insertion_point(field:proto.MSAHeader.is_next)
    pub is_next: bool,
    // @@protoc_insertion_point(field:proto.MSAHeader.http_header)
    pub http_header: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:proto.MSAHeader.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MSAHeader {
    fn default() -> &'a MSAHeader {
        <MSAHeader as ::protobuf::Message>::default_instance()
    }
}

impl MSAHeader {
    pub fn new() -> MSAHeader {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sender_id",
            |m: &MSAHeader| { &m.sender_id },
            |m: &mut MSAHeader| { &mut m.sender_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message_uuid",
            |m: &MSAHeader| { &m.message_uuid },
            |m: &mut MSAHeader| { &mut m.message_uuid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &MSAHeader| { &m.type_ },
            |m: &mut MSAHeader| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "url",
            |m: &MSAHeader| { &m.url },
            |m: &mut MSAHeader| { &mut m.url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "method",
            |m: &MSAHeader| { &m.method },
            |m: &mut MSAHeader| { &mut m.method },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message_index",
            |m: &MSAHeader| { &m.message_index },
            |m: &mut MSAHeader| { &mut m.message_index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "state",
            |m: &MSAHeader| { &m.state },
            |m: &mut MSAHeader| { &mut m.state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_next",
            |m: &MSAHeader| { &m.is_next },
            |m: &mut MSAHeader| { &mut m.is_next },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "http_header",
            |m: &MSAHeader| { &m.http_header },
            |m: &mut MSAHeader| { &mut m.http_header },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MSAHeader>(
            "MSAHeader",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MSAHeader {
    const NAME: &'static str = "MSAHeader";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.sender_id = is.read_string()?;
                },
                18 => {
                    self.message_uuid = is.read_string()?;
                },
                24 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                34 => {
                    self.url = is.read_string()?;
                },
                42 => {
                    self.method = is.read_string()?;
                },
                48 => {
                    self.message_index = is.read_int32()?;
                },
                56 => {
                    self.state = is.read_enum_or_unknown()?;
                },
                64 => {
                    self.is_next = is.read_bool()?;
                },
                74 => {
                    self.http_header = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.sender_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.sender_id);
        }
        if !self.message_uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message_uuid);
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(msaheader::Type::General) {
            my_size += ::protobuf::rt::int32_size(3, self.type_.value());
        }
        if !self.url.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.url);
        }
        if !self.method.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.method);
        }
        if self.message_index != 0 {
            my_size += ::protobuf::rt::int32_size(6, self.message_index);
        }
        if self.state != ::protobuf::EnumOrUnknown::new(msaheader::State::Error) {
            my_size += ::protobuf::rt::int32_size(7, self.state.value());
        }
        if self.is_next != false {
            my_size += 1 + 1;
        }
        if !self.http_header.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.http_header);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.sender_id.is_empty() {
            os.write_string(1, &self.sender_id)?;
        }
        if !self.message_uuid.is_empty() {
            os.write_string(2, &self.message_uuid)?;
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(msaheader::Type::General) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        if !self.url.is_empty() {
            os.write_string(4, &self.url)?;
        }
        if !self.method.is_empty() {
            os.write_string(5, &self.method)?;
        }
        if self.message_index != 0 {
            os.write_int32(6, self.message_index)?;
        }
        if self.state != ::protobuf::EnumOrUnknown::new(msaheader::State::Error) {
            os.write_enum(7, ::protobuf::EnumOrUnknown::value(&self.state))?;
        }
        if self.is_next != false {
            os.write_bool(8, self.is_next)?;
        }
        if !self.http_header.is_empty() {
            os.write_string(9, &self.http_header)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MSAHeader {
        MSAHeader::new()
    }

    fn clear(&mut self) {
        self.sender_id.clear();
        self.message_uuid.clear();
        self.type_ = ::protobuf::EnumOrUnknown::new(msaheader::Type::General);
        self.url.clear();
        self.method.clear();
        self.message_index = 0;
        self.state = ::protobuf::EnumOrUnknown::new(msaheader::State::Error);
        self.is_next = false;
        self.http_header.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MSAHeader {
        static instance: MSAHeader = MSAHeader {
            sender_id: ::std::string::String::new(),
            message_uuid: ::std::string::String::new(),
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            url: ::std::string::String::new(),
            method: ::std::string::String::new(),
            message_index: 0,
            state: ::protobuf::EnumOrUnknown::from_i32(0),
            is_next: false,
            http_header: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MSAHeader {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MSAHeader").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MSAHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MSAHeader {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `MSAHeader`
pub mod msaheader {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:proto.MSAHeader.Type)
    pub enum Type {
        // @@protoc_insertion_point(enum_value:proto.MSAHeader.Type.General)
        General = 0,
        // @@protoc_insertion_point(enum_value:proto.MSAHeader.Type.LinkRequest)
        LinkRequest = 1,
    }

    impl ::protobuf::Enum for Type {
        const NAME: &'static str = "Type";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Type> {
            match value {
                0 => ::std::option::Option::Some(Type::General),
                1 => ::std::option::Option::Some(Type::LinkRequest),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Type] = &[
            Type::General,
            Type::LinkRequest,
        ];
    }

    impl ::protobuf::EnumFull for Type {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("MSAHeader.Type").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Type {
        fn default() -> Self {
            Type::General
        }
    }

    impl Type {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Type>("MSAHeader.Type")
        }
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:proto.MSAHeader.State)
    pub enum State {
        // @@protoc_insertion_point(enum_value:proto.MSAHeader.State.Error)
        Error = 0,
        // @@protoc_insertion_point(enum_value:proto.MSAHeader.State.Success)
        Success = 1,
    }

    impl ::protobuf::Enum for State {
        const NAME: &'static str = "State";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<State> {
            match value {
                0 => ::std::option::Option::Some(State::Error),
                1 => ::std::option::Option::Some(State::Success),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [State] = &[
            State::Error,
            State::Success,
        ];
    }

    impl ::protobuf::EnumFull for State {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("MSAHeader.State").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for State {
        fn default() -> Self {
            State::Error
        }
    }

    impl State {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<State>("MSAHeader.State")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fMSAHeader.proto\x12\x05proto\"\xf4\x02\n\tMSAHeader\x12\x1b\n\tsen\
    der_id\x18\x01\x20\x01(\tR\x08senderId\x12!\n\x0cmessage_uuid\x18\x02\
    \x20\x01(\tR\x0bmessageUuid\x12)\n\x04type\x18\x03\x20\x01(\x0e2\x15.pro\
    to.MSAHeader.TypeR\x04type\x12\x10\n\x03url\x18\x04\x20\x01(\tR\x03url\
    \x12\x16\n\x06method\x18\x05\x20\x01(\tR\x06method\x12#\n\rmessage_index\
    \x18\x06\x20\x01(\x05R\x0cmessageIndex\x12,\n\x05state\x18\x07\x20\x01(\
    \x0e2\x16.proto.MSAHeader.StateR\x05state\x12\x17\n\x07is_next\x18\x08\
    \x20\x01(\x08R\x06isNext\x12\x1f\n\x0bhttp_header\x18\t\x20\x01(\tR\nhtt\
    pHeader\"$\n\x04Type\x12\x0b\n\x07General\x10\0\x12\x0f\n\x0bLinkRequest\
    \x10\x01\"\x1f\n\x05State\x12\t\n\x05Error\x10\0\x12\x0b\n\x07Success\
    \x10\x01B\nZ\x08../protoJ\xac\x06\n\x06\x12\x04\0\0\x17\x01\n\x08\n\x01\
    \x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x0e\n\x08\n\x01\x08\
    \x12\x03\x03\0\x1f\n\t\n\x02\x08\x0b\x12\x03\x03\0\x1f\n\n\n\x02\x04\0\
    \x12\x04\x04\0\x17\x01\n\n\n\x03\x04\0\x01\x12\x03\x04\x08\x11\n\x0b\n\
    \x04\x04\0\x02\0\x12\x03\x05\x04\x19\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\
    \x05\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x05\x0b\x14\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03\x05\x17\x18\n\x0b\n\x04\x04\0\x02\x01\x12\x03\
    \x06\x04\x1c\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x06\x04\n\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03\x06\x0b\x17\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03\x06\x1a\x1b\n\x0c\n\x04\x04\0\x04\0\x12\x04\x07\x04\n\x05\n\x0c\n\
    \x05\x04\0\x04\0\x01\x12\x03\x07\t\r\n\r\n\x06\x04\0\x04\0\x02\0\x12\x03\
    \x08\x08\x14\n\x0e\n\x07\x04\0\x04\0\x02\0\x01\x12\x03\x08\x08\x0f\n\x0e\
    \n\x07\x04\0\x04\0\x02\0\x02\x12\x03\x08\x12\x13\n\r\n\x06\x04\0\x04\0\
    \x02\x01\x12\x03\t\x08\x18\n\x0e\n\x07\x04\0\x04\0\x02\x01\x01\x12\x03\t\
    \x08\x13\n\x0e\n\x07\x04\0\x04\0\x02\x01\x02\x12\x03\t\x16\x17\n\x0b\n\
    \x04\x04\0\x02\x02\x12\x03\x0b\x04\x12\n\x0c\n\x05\x04\0\x02\x02\x06\x12\
    \x03\x0b\x04\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x0b\t\r\n\x0c\n\
    \x05\x04\0\x02\x02\x03\x12\x03\x0b\x10\x11\n\x0b\n\x04\x04\0\x02\x03\x12\
    \x03\x0c\x04\x13\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x0c\x04\n\n\x0c\n\
    \x05\x04\0\x02\x03\x01\x12\x03\x0c\x0b\x0e\n\x0c\n\x05\x04\0\x02\x03\x03\
    \x12\x03\x0c\x11\x12\n\x0b\n\x04\x04\0\x02\x04\x12\x03\r\x04\x16\n\x0c\n\
    \x05\x04\0\x02\x04\x05\x12\x03\r\x04\n\n\x0c\n\x05\x04\0\x02\x04\x01\x12\
    \x03\r\x0b\x11\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\r\x14\x15\n\x0b\n\
    \x04\x04\0\x02\x05\x12\x03\x0e\x04\x1c\n\x0c\n\x05\x04\0\x02\x05\x05\x12\
    \x03\x0e\x04\t\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x0e\n\x17\n\x0c\n\
    \x05\x04\0\x02\x05\x03\x12\x03\x0e\x1a\x1b\n\x0c\n\x04\x04\0\x04\x01\x12\
    \x04\x10\x04\x13\x05\n\x0c\n\x05\x04\0\x04\x01\x01\x12\x03\x10\t\x0e\n\r\
    \n\x06\x04\0\x04\x01\x02\0\x12\x03\x11\x08\x12\n\x0e\n\x07\x04\0\x04\x01\
    \x02\0\x01\x12\x03\x11\x08\r\n\x0e\n\x07\x04\0\x04\x01\x02\0\x02\x12\x03\
    \x11\x10\x11\n\r\n\x06\x04\0\x04\x01\x02\x01\x12\x03\x12\x08\x14\n\x0e\n\
    \x07\x04\0\x04\x01\x02\x01\x01\x12\x03\x12\x08\x0f\n\x0e\n\x07\x04\0\x04\
    \x01\x02\x01\x02\x12\x03\x12\x12\x13\n\x0b\n\x04\x04\0\x02\x06\x12\x03\
    \x14\x04\x14\n\x0c\n\x05\x04\0\x02\x06\x06\x12\x03\x14\x04\t\n\x0c\n\x05\
    \x04\0\x02\x06\x01\x12\x03\x14\n\x0f\n\x0c\n\x05\x04\0\x02\x06\x03\x12\
    \x03\x14\x12\x13\n\x0b\n\x04\x04\0\x02\x07\x12\x03\x15\x04\x15\n\x0c\n\
    \x05\x04\0\x02\x07\x05\x12\x03\x15\x04\x08\n\x0c\n\x05\x04\0\x02\x07\x01\
    \x12\x03\x15\t\x10\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03\x15\x13\x14\n\
    \x0b\n\x04\x04\0\x02\x08\x12\x03\x16\x04\x1b\n\x0c\n\x05\x04\0\x02\x08\
    \x05\x12\x03\x16\x04\n\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03\x16\x0b\x16\
    \n\x0c\n\x05\x04\0\x02\x08\x03\x12\x03\x16\x19\x1ab\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(MSAHeader::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(msaheader::Type::generated_enum_descriptor_data());
            enums.push(msaheader::State::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
